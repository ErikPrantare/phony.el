* talon-list.el
Define talon lists of Elisp values, from Elisp.

** Setup
Clone this repo and add the following to your Emacs configuration:

#+begin_src elisp
  (add-to-list 'load-path "path/to/talon-list/directory")
  (require 'talon-list)
#+end_src

Then, add [[file:talon/read_lists.py]] to =~/.talon/user/=.

Using this package requires the ability to evaluate arbitrary lisp
expressions from talon.  If you don't already have this set up, add
[[file:talon/evaluate-lisp.py]] to =~/.talon/user/= and make sure to run
emacs as a server (see [[info:emacs#Emacs Server][Using Emacs as a Server]] in the Emacs manual).

You can now define talon lists using the ~phony-define-list~ macro.
It takes three arguments: First, an emacs identifier for storing the
list.  Second, the talon identifier.  Finally, an alist, where each
entry maps an utterance to a value.

This macro will define the variable given as its first argument and
store the alist in it, making it available for use in Elisp.  It will
also notify talon that the lists have been updated, causing talon to
read the defined lists.  After this, the lists will become available
for usage in talon files.

** Example usage
*** Create list mapping spoken form of colors to hexcode
In emacs:

#+begin_src emacs-lisp
  (phony-define-list my/colors color
    '(("white" . "#fffff")
      ("black" . "#000000")
      ("red" . "#ff0000")))
#+end_src

In talon:

#+begin_src talon
  insert color {user.color}:
      user.emacs_lisp("(insert {color})")
#+end_src

*** Create list of commands
In emacs:

#+begin_src emacs-lisp
  (phony-define-list my/commands command
    `(("save" . ,#'save-buffer)
      ("hello" . ,(lambda () (message "Hello %s!" (user-full-name))))))
#+end_src

In talon:

#+begin_src talon
  {user.command}:
      user.emacs_lisp("(funcall {command})")
#+end_src

** Accessing and modifying defined lists
To access the value corresponding to an utterance, use the function
~phony-list-get~.  This is a generalized variable, meaning you can use
~setf~ to modify elements of it:

#+begin_src elisp
  (setf (phony-list-get "squash" my/colors) 'yellow)
#+end_src

This form allows you to add, remove and change values in the list.
Removing an element is done by setting it to nil.  After modifying a
list, the changes will automatically sync with talon.

** Versioning system
This project uses [[https://semver.org/][semantic versioning]].  While still on 0.y.z, an
increment of y signals breaking changes.
